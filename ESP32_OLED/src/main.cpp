#include <Arduino.h>
#include <U8g2lib.h>
#include <Wire.h>
U8G2_SSD1306_128X64_NONAME_F_HW_I2C u8g2(U8G2_R0, /* reset=*/ U8X8_PIN_NONE, /* clock=*/ 22, /* data=*/ 21);   // ESP32 Thing, HW I2C with pin remapping

float lattitude = 1.234567891011111;
float longitude = 2.34567892222222;
int speed = 0;
int satellites = 5;
int alt = 100;
int t = 0;
int i = 0;
u8g2_uint_t xx  = 0;

int x_max    = 128;       //OLED display width, in pixels
int y_max    = 62;        //OLED display width, in pixels
int x_center = x_max/2;
int y_center = y_max/2+10;
int arc      = y_max/2;
int angle    = 0;
int needle_pos = 0;

#define sat_logo_width 20
#define sat_logo_height 19

#define logo_width 64
#define logo_height 64

const unsigned char sat_logo[] = {
0x00, 0x08, 0x00, 0x24, 0x00, 0x42, 0x00, 0x81, 0x00, 0x42, 0x07, 0xA4, 0x07, 0xC8, 0x0F, 0xD0,
0x13, 0xE0, 0x21, 0xF6, 0x50, 0xFC, 0xA1, 0x38, 0x12, 0x35, 0x04, 0x21, 0x08, 0x02, 0x00, 0x05,
0x00, 0x06, 0x00, 0x01, 0x00, 0x04, 0x00, 0x5C, 0x6C, 0x6F, 0x67, 0x6F, 0x2E, 0x74, 0x78, 
};

const unsigned char logo[] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00,
0x12, 0x00, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x01, 0x40, 0x17, 0x00, 0xA0, 0x03, 0x80, 0x32,
0x00, 0x70, 0x07, 0x00, 0x12, 0x00, 0x38, 0x07, 0x00, 0x00, 0x00, 0x18, 0x0E, 0x00, 0x00, 0x00,
0x1C, 0x0C, 0x00, 0x0C, 0x00, 0x0C, 0x1C, 0x00, 0x0C, 0x00, 0x0E, 0x18, 0x00, 0x2D, 0x00, 0x06,
0x18, 0x00, 0x0C, 0x00, 0x06, 0x38, 0x40, 0x4C, 0x80, 0x87, 0x39, 0x00, 0x4C, 0x00, 0x23, 0x30,
0xC0, 0x2D, 0x00, 0xC3, 0x33, 0x34, 0x3F, 0x01, 0x13, 0x30, 0xC2, 0x0C, 0x00, 0x63, 0x32, 0x32,
0x08, 0x13, 0x93, 0x39, 0x89, 0x00, 0x06, 0x63, 0x38, 0x60, 0x00, 0x21, 0x87, 0x19, 0xFE, 0x00,
0x1F, 0xF7, 0x18, 0xFF, 0x80, 0x7F, 0xC6, 0x1C, 0x1F, 0xC0, 0xFE, 0x0E, 0x0C, 0x03, 0xC0, 0xF0,
0x0E, 0x0E, 0x0F, 0xC0, 0xFC, 0x1C, 0x06, 0x0F, 0xC0, 0x7E, 0x1C, 0x07, 0x0F, 0xC0, 0x7E, 0x38,
0x03, 0x9F, 0x80, 0x7E, 0x70, 0x01, 0xDF, 0x80, 0x7E, 0xF0, 0x00, 0xE7, 0x80, 0x7D, 0xE0, 0x00,
0x73, 0x80, 0x73, 0xC0, 0x00, 0x3C, 0x00, 0x0F, 0x00, 0x00, 0x1F, 0xC0, 0xFE, 0x00, 0x00, 0x07,
0xFF, 0xF8, 0x00, 0x00, 0x00, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x66, 0x71, 0x9D, 0x9B, 0xEF, 0x64, 0xC9, 0x9D, 0x99, 0x8C, 0x64, 0xC9, 0xDD, 0x99, 0x8C,
0x7C, 0xC1, 0x4D, 0x99, 0x8F, 0x64, 0xC1, 0x6D, 0x99, 0x8C, 0x64, 0xC9, 0x6D, 0x99, 0x8C, 0x64,
0xD9, 0x6C, 0xD1, 0x8F, 0x64, 0x31, 0x0C, 0x60, 0x87, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x68, 0x61, 0x72, 0x20, 0x48, 0x43, 0x4D, 0x55, 0x54, 0x45, 0x40,
};

const unsigned char satellite_BMP_64x64 [] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00,
0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x01, 0xDC, 0x00, 0x00, 0x00,
0x00, 0x03, 0x06, 0x00, 0x00, 0x00, 0x00, 0x07, 0x87, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xE3, 0x80,
0x00, 0x00, 0x00, 0x18, 0x63, 0x80, 0x00, 0x00, 0x00, 0x38, 0x37, 0x00, 0x00, 0x00, 0x00, 0x7E,
0x3E, 0x00, 0x00, 0x00, 0x00, 0xC7, 0x1C, 0x00, 0x00, 0x00, 0x20, 0xC3, 0x38, 0x00, 0x00, 0x02,
0xF0, 0xE1, 0xF0, 0x00, 0x00, 0x07, 0xD8, 0x70, 0xE0, 0x00, 0x00, 0x03, 0x9C, 0x39, 0xC0, 0x00,
0x00, 0x07, 0x8E, 0x7F, 0x80, 0x00, 0x00, 0x06, 0x03, 0xCF, 0x00, 0x00, 0x00, 0x0C, 0x03, 0x86,
0x00, 0x00, 0x00, 0x06, 0x01, 0xC0, 0x00, 0x00, 0x00, 0x03, 0x00, 0x60, 0x00, 0x00, 0x00, 0x01,
0x80, 0x70, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x38, 0x00, 0x00, 0x00, 0x00, 0x60, 0x0C, 0x00, 0x00,
0x00, 0x1C, 0x70, 0x0C, 0x00, 0x00, 0x00, 0x3E, 0xF8, 0x38, 0x00, 0x00, 0x00, 0x67, 0x8C, 0x70,
0x00, 0x00, 0x00, 0xE3, 0x86, 0x78, 0x00, 0x00, 0x01, 0xE1, 0xC3, 0xDF, 0x00, 0x00, 0x03, 0x30,
0xE1, 0x89, 0x08, 0xC6, 0x07, 0x38, 0xE0, 0x09, 0x1C, 0xC6, 0x0F, 0x1D, 0xC0, 0x0F, 0x18, 0xC6,
0x1B, 0x07, 0x80, 0x00, 0x18, 0x86, 0x39, 0x87, 0x00, 0x00, 0x30, 0x8E, 0x71, 0xEE, 0x00, 0x00,
0x71, 0x8C, 0x38, 0x7C, 0x00, 0x01, 0xE1, 0x8C, 0x18, 0x38, 0x00, 0x07, 0x83, 0x18, 0x0E, 0x70,
0x00, 0x02, 0x07, 0x18, 0x07, 0xE0, 0x00, 0x00, 0x0C, 0x30, 0x03, 0xC0, 0x00, 0x00, 0x3C, 0x30,
0x01, 0x80, 0x00, 0x07, 0xF0, 0xE0, 0x00, 0x00, 0x00, 0x07, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x00,
0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0x00, 0x00, 0x00,
0x00, 0x07, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x07, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

const unsigned char satellite_BMP_24x24 [] = {
0x00, 0x00, 0x40, 0x00, 0x00, 0xE0, 0x00, 0x01, 0xF0, 0x00, 0x03, 0xF8, 0x00, 0x06, 0xF8, 0x00,
0x0F, 0x70, 0x01, 0xCD, 0xE0, 0x03, 0xEF, 0xC0, 0x03, 0xBF, 0x80, 0x03, 0x1B, 0x00, 0x01, 0x8C,
0x00, 0x00, 0xC6, 0x00, 0x07, 0xE6, 0x00, 0x0F, 0xBE, 0x00, 0x1D, 0xDF, 0x2B, 0x37, 0xC3, 0x6B,
0x7B, 0x80, 0x6B, 0xFF, 0x01, 0xDA, 0x7E, 0x03, 0xB6, 0x3C, 0x00, 0x64, 0x18, 0x03, 0xCC, 0x00,
0x00, 0x38, 0x00, 0x03, 0xE0, 0x00, 0x03, 0x80, 
};

const unsigned char location_BMP_32x32 [] = {
0x00, 0x01, 0x80, 0x00, 0x00, 0x1E, 0x78, 0x00, 0x00, 0x70, 0x0E, 0x00, 0x00, 0xC0, 0x03, 0x00,
0x01, 0x80, 0x01, 0x80, 0x01, 0x00, 0x00, 0x80, 0x03, 0x03, 0xC0, 0xC0, 0x02, 0x0C, 0x30, 0x40,
0x06, 0x18, 0x18, 0x60, 0x04, 0x10, 0x08, 0x20, 0x04, 0x10, 0x08, 0x20, 0x04, 0x10, 0x08, 0x20,
0x04, 0x10, 0x08, 0x20, 0x04, 0x18, 0x18, 0x20, 0x02, 0x0C, 0x30, 0x40, 0x02, 0x07, 0xE0, 0x40,
0x02, 0x00, 0x00, 0x40, 0x01, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0x80, 0x00, 0x80, 0x01, 0x00,
0x00, 0xC0, 0x03, 0x00, 0x00, 0x40, 0x02, 0x00, 0x00, 0x60, 0x06, 0x00, 0x00, 0x20, 0x04, 0x00,
0x00, 0x10, 0x08, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x0C, 0x30, 0x00, 0x00, 0x04, 0x20, 0x00,
0x00, 0x06, 0x60, 0x00, 0x00, 0x03, 0xC0, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00
};

const unsigned char altitude [] = {
0x00, 0xFF, 0x00, 0x03, 0x00, 0xC0, 0x04, 0x7E, 0x20, 0x19, 0x81, 0x98, 0x16, 0x00, 0x68, 0x2C,
0x3C, 0x34, 0x48, 0x00, 0x12, 0x50, 0x18, 0x0A, 0x90, 0x3C, 0x08, 0xA0, 0x00, 0x05, 0xB0, 0x18,
0x0D, 0xA8, 0x24, 0x15, 0xA8, 0xC3, 0x15, 0xB0, 0x7E, 0x0D, 0xA0, 0x00, 0x05, 0x90, 0x3C, 0x09,
0x50, 0x18, 0x0A, 0x48, 0x00, 0x12, 0x2C, 0x3C, 0x34, 0x16, 0x00, 0x68, 0x19, 0x81, 0x98, 0x04,
0x7E, 0x20, 0x03, 0x00, 0xC0, 0x00, 0xFF, 0x00, 
};

const unsigned char distance [] = {
0x00, 0x00, 0x3C, 0x00, 0x00, 0x42, 0x00, 0x00, 0x81, 0x00, 0x00, 0x99, 0x00, 0x00, 0x99, 0x00,
0x00, 0x81, 0x00, 0x00, 0x42, 0x00, 0x00, 0x66, 0x1F, 0x80, 0x24, 0x30, 0xC0, 0x18, 0x40, 0x20,
0x18, 0x4F, 0x30, 0x18, 0x99, 0x90, 0x00, 0x90, 0x90, 0x10, 0x90, 0x91, 0x60, 0x99, 0x93, 0x00,
0xCF, 0x32, 0x00, 0x40, 0x20, 0x00, 0x60, 0x64, 0x00, 0x20, 0x4C, 0x00, 0x10, 0x88, 0x00, 0x19,
0x80, 0x00, 0x0F, 0x60, 0x00, 0x06, 0x40, 0x00, 
};


void setup(void) {
  Serial.begin(115200);
  u8g2.setBusClock(1000000);
  u8g2.begin();
  u8g2.setFont(u8g2_font_8x13B_mr);
  u8g2.enableUTF8Print();
  u8g2.setFontMode(1);
  u8g2.clearBuffer();
  u8g2.drawFrame(5,5,118,58);
  u8g2.drawBitmap(12, 6, 5.25, 54, logo);
  u8g2.drawStr(75,30,"GPS");
  u8g2.drawStr(60,45,"TRACKER");
  u8g2.sendBuffer();

  delay(1000);
  // enable UTF8 support for the Arduino print() function
}
void oledDisplay(){
  u8g2.clearBuffer();
  u8g2.setCursor(2, 10);
  u8g2.print("Lat: " + String(lattitude,6));
  u8g2.setCursor(2, 20);
  u8g2.print("Long: " + String (longitude,6));
  u8g2.setCursor(2, 30);
  u8g2.print("Speed: " + String(speed));
  u8g2.setCursor(2, 40);
  u8g2.print("Satellies: " + String(satellites));
  u8g2.sendBuffer();
}
void gauge(uint8_t angle);
void tracker();
void geo_fencing(int max_distance);

void login_loading(){
  u8g2.setFont(u8g2_font_8x13B_mr);
  u8g2.clearBuffer();
  u8g2.drawStr(10,30,"LOGIN");
  u8g2.drawStr(10,45,"LOADING...");
  u8g2.sendBuffer();
}
void login_done(){
  u8g2.setFont(u8g2_font_8x13B_mr);
  u8g2.clearBuffer();
  u8g2.drawStr(25,15,"WELCOME TO");
  u8g2.drawStr(25,30,"NAVIGATION");
  u8g2.drawStr(40,45,"SYSTEM");
  u8g2.drawStr(20,60,"BY DAT HOANG");
  u8g2.sendBuffer();
}
void menu_loading(){
  u8g2.setFont(u8g2_font_8x13B_mr);
  u8g2.clearBuffer();
  u8g2.drawStr(50,15,"MENU");
  u8g2.drawStr(10,35,"1. GPS Tracker");
  u8g2.drawStr(10,55,"2. GEO Fencing");
  u8g2.sendBuffer();
}
void tracker_loading(){
  u8g2.setFont(u8g2_font_8x13B_mr);
  u8g2.clearBuffer();
  u8g2.drawStr(10,30,"GPS TRACKER");
  u8g2.drawStr(10,45,"LOADING...");
  u8g2.sendBuffer();
}
void fencing_loading(){
  u8g2.setFont(u8g2_font_8x13B_mr);
  u8g2.clearBuffer();
  u8g2.drawStr(10,30,"GEO FENCING");
  u8g2.drawStr(10,45,"LOADING...");
  u8g2.sendBuffer();
}
void finding_satellite(){
  u8g2.setFont(u8g2_font_t0_12b_mf);
  u8g2.clearBuffer();
  u8g2.drawBitmap(1, 12,6,48,satellite_BMP_64x64);
  u8g2.drawStr(55,30,"Finding");
  u8g2.drawStr(55,45,"Satellites...");
  u8g2.sendBuffer();
}
void fencing_init(){
  u8g2.setFont(u8g2_font_8x13B_mr);
  u8g2.clearBuffer();
  u8g2.drawStr(10,30,"Preparing for");
  u8g2.drawStr(10,45,"GEO-Fencing...");
  u8g2.sendBuffer();
}
void fencing_run(){
  u8g2.setFont(u8g2_font_8x13B_mr);
  u8g2.clearBuffer();
  u8g2.drawStr(10,25,"Complete");
  u8g2.drawStr(10,40,"preparing");
  u8g2.drawStr(10,55,"Starting...");
  u8g2.sendBuffer();
}


void loop(void) {
  // if(millis() - t > 5000){
  // oledDisplay();
  // t = millis();
  // }
  // lattitude = lattitude + 0.2;
  // longitude = longitude + 1;
  // speed = speed - 0.3;
  // satellites = satellites + 0.001;
  // delay(1000);

  //chuc nang 2: speedometer
  // speed += 1;
  // delay(1000);
  // needle_pos = map(speed,0,200,0,90); //SET NEEDLE
  // // show needle and dial
  // xx = needle_pos;                                    
  // if (xx<45)
  //   {xx=xx+135;}
  // else
  //   {xx=xx-45;} 
  // //----------------------------------------------------------
  // //Display Data on Oled
  // {
  //   u8g2.firstPage(); 
  //   do {             
  //     gauge(xx);
  //   }
  //   while( u8g2.nextPage() );
  // }

// chuc nang 1: GPS Tracker:
// lattitude +=1;
// longitude +=0.2;
// satellites += 1;
// alt -=1;
// delay(1000);
// tracker();
// geo_fencing(1000);
fencing_run();
}

void gauge(uint8_t angle){
  u8g2.setFont(u8g_font_chikita);
  u8g2.clearBuffer();
  u8g2.drawCircle(x_center,y_center+5,arc+6, U8G2_DRAW_UPPER_RIGHT);
  u8g2.drawCircle(x_center,y_center+5,arc+4, U8G2_DRAW_UPPER_RIGHT);
  u8g2.drawCircle(x_center,y_center+5,arc+6, U8G2_DRAW_UPPER_LEFT);
  u8g2.drawCircle(x_center,y_center+5,arc+4, U8G2_DRAW_UPPER_LEFT);
  u8g2.drawStr(20,  42, "0");   
  u8g2.drawStr(18,  29, "25");
  u8g2.drawStr(28,  14, "50");
  u8g2.drawStr(58,  5, "100");
  u8g2.drawStr(91,  14, "150");
  u8g2.drawStr(101, 29, "175");
  u8g2.drawStr(105, 42, "200");

  u8g2.setCursor(54,30);
  u8g2.print("km/h");
  u8g2.setCursor(50,37);
  u8g2.print("SPEED");

  u8g2.drawBitmap(1, 0, 2.5, sat_logo_height,sat_logo);
  u8g2.setCursor(18, 5);
  u8g2.print("12");

  float x1=sin(2*angle*2*3.14/360);           
  float y1=cos(2*angle*2*3.14/360); 
  u8g2.drawLine(x_center, y_center, x_center+arc*x1, y_center-arc*y1);
  u8g2.drawDisc(x_center, y_center, 5, U8G2_DRAW_UPPER_LEFT);
  u8g2.drawDisc(x_center, y_center, 5, U8G2_DRAW_UPPER_RIGHT);

  u8g2.setFont(u8g_font_profont22);
  u8g2.setCursor(54,60);
  if (speed<10){                              
    u8g2.print("0");
  }
  if (speed>99) {                                  
    u8g2.setCursor(47,60);
  }
  u8g2.print(speed);

  u8g2.sendBuffer();
}

void tracker(){
  //wait for satellite
  // u8g2.setFont(u8g2_font_t0_12b_mf);
  // u8g2.clearBuffer();
  // u8g2.drawBitmap(1, 12,6,48,satellite_BMP_64x64);
  // u8g2.drawStr(55,30,"Finding");
  // u8g2.drawStr(55,45,"Satellites...");
  // u8g2.sendBuffer();
  // delay(500);
  // u8g2.clearBuffer();
  // u8g2.drawBitmap(1, 12,6,48,satellite_BMP_64x64);
  // u8g2.sendBuffer();
  // delay(500);
  //tracker
  u8g2.setFont(u8g2_font_t0_12_mr);
  u8g2.clearBuffer();
  u8g2.drawBitmap(5, 1,3,24,satellite_BMP_24x24);
  u8g2.setCursor(30,18);
  u8g2.print("Sat:" + (String)satellites);
  u8g2.drawBitmap(1,33,4,32,location_BMP_32x32);
  u8g2.setCursor(30,45);
  u8g2.print("Lat:" + String(lattitude,6));
  u8g2.setCursor(30,60);
  u8g2.print("Lng:" + String (longitude,6));
  u8g2.drawBitmap(75,1,3,24,altitude);
  u8g2.setCursor(103,13);
  u8g2.print("Alt:");
  u8g2.setCursor(103,23);
  u8g2.print(alt);
  u8g2.sendBuffer();
}

void geo_fencing(int max_distance){
  u8g2.setFont(u8g2_font_t0_12_mr);
  u8g2.clearBuffer();
  u8g2.drawCircle(20,20,13,U8G2_DRAW_ALL);
  u8g2.drawCircle(20,20,0.5,U8G2_DRAW_ALL);
  u8g2.drawLine(20,20,33,20);
  u8g2.drawLine(20,20,22,25);
  u8g2.drawLine(20,20,22,15);
  u8g2.drawLine(33,20,29,25);
  u8g2.drawLine(33,20,29,15);
  u8g2.setCursor(40,18);
  u8g2.print("Max");
  u8g2.setCursor(40,28);
  u8g2.print("Distance: ");
  u8g2.setCursor(95,28);
  u8g2.print((String)max_distance);
  u8g2.drawBitmap(10,36,3,24,distance);
  u8g2.setCursor(40,55);
  u8g2.print("Distance: ");
  u8g2.setCursor(95,55);
  u8g2.print("...");
  u8g2.sendBuffer();
}

